<snippet>
	<content><![CDATA[
vll v[N];
vll EulerPath;
ll in[N], out[N];
void dfs_EulerPath(ll node) {
    while (out[node]) {
        dfs_EulerPath(v[node][--out[node]]);
    }
    EulerPath.push_back(node);
}
bool findEulerianPath() { /* 1: if its possible to find a eulerPath */
    // calculate the in and out degree for each node
    for (int i = 1; i <= n; i++)
        for (int j = 0; j < (int)v[i].size(); j++)
            in[v[i][j]]++, out[i]++;

    // check if its possible to find euler path or not
    bool ok = 1;
    ll numStartNode = 0, numEndNode = 0;
    for (int i = 1; i <= n; i++) {
        if (out[i] - in[i] > 1 || in[i] - out[i] > 1) ok = 0;
        else if (out[i] - in[i] == 1) numStartNode++;
        else if (in[i] - out[i] == 1) numEndNode++;
    }
    if (ok) ok = ((numEndNode == 0 && numStartNode == 0) || (numEndNode == 1 && numStartNode == 1));
    if (!ok) return false;

    ll node = 1;
    for (int i = 1; i <= n; i++)
        if (out[i] - in[i] == 1)
            node = i;

    dfs_EulerPath(node);

    for (int i = 1; i <= n; i++) {
        if (out[i]) return 0;
    }

    return true;
}
]]></content>
	Optional: Set a tabTrigger to define how to trigger the snippet
	<tabTrigger>eulerian_path_directed_graph</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
