<snippet>
	<content><![CDATA[
// range update, {min, index} query
const ll N = 2e5 + 11;
pll TREE[4 * N];
ll lazy[N * 4], a[N];

pll pull(pll l, pll r) {
    ll x = min(l.f, r.f), y = -1; //operation
    if (l.f < r.f) y = l.s;
    else y = r.s;

    return make_pair(x, y);
}

void push(ll v) {
    TREE[v * 2].f += lazy[v];
    lazy[v * 2] += lazy[v];
    TREE[v * 2 + 1].f += lazy[v];
    lazy[v * 2 + 1] += lazy[v];
    lazy[v] = 0;
}

void build(ll node, ll l, ll r) {
    if (l == r) TREE[node] = {a[l], l};
    else {
        ll mid = l + (r - l) / 2;
        build(2 * node, l, mid);
        build(2 * node + 1, mid + 1, r);

        TREE[node] = pull(TREE[node * 2], TREE[node * 2 + 1]);
    }
}

void update(ll v, ll tl, ll tr, ll l, ll r, ll addend) {
    if (l > r)
        return;
    if (l == tl && tr == r) {
        TREE[v].f += addend;
        lazy[v] += addend;
    } else {
        push(v);
        ll tm = (tl + tr) / 2;
        update(v * 2, tl, tm, l, min(r, tm), addend);
        update(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, addend);
        TREE[v] = pull(TREE[v * 2], TREE[v * 2 + 1]);
    }
}

pll query(ll v, ll tl, ll tr, ll l, ll r) {
    if (l > r) return {inf, -1}; //operation (inf , -inf , 0 ...)
    if (l <= tl && tr <= r) return TREE[v];
    push(v);

    ll tm = (tl + tr) / 2;
    pll p1 = query(v * 2, tl, tm, l, min(r, tm));
    pll p2 = query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);

    return pull(p1, p2);
}
//build(1,0,n-1) .... query(1,0,n-1,l,r) .... update(1,0,n-1,l,r,add)
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lazy</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
